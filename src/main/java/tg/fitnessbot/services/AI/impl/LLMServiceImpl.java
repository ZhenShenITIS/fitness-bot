package tg.fitnessbot.services.AI.impl;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import tg.fitnessbot.api.OpenAIClient;
import tg.fitnessbot.constants.MessageText;
import tg.fitnessbot.constants.StringConstants;
import tg.fitnessbot.models.Activity;
import tg.fitnessbot.models.Food;
import tg.fitnessbot.repositories.ActivityRepository;
import tg.fitnessbot.repositories.FoodRepository;
import tg.fitnessbot.services.AI.LLMService;
@Service
public class LLMServiceImpl implements LLMService {
    @Autowired
    OpenAIClient openAIClient;

    @Autowired
    ActivityRepository activityRepository;

    @Autowired
    FoodRepository foodRepository;

    @Override
    @Async
    public String processAudio(String audio) {
        String prompt = getPromptForAudio(audio);
        // TODO Убрать выводы
        System.out.println(prompt);
        ResponseEntity<String> response = openAIClient.getResponse(prompt);
        String text = getTextFromJSON(new JSONObject(response.getBody()));
        System.out.println(text);
        return text;
    }

    private String getTextFromJSON (JSONObject object) {
        JSONArray jsons = object.getJSONArray("output");
        // Плохая практика, так делать нельзя!
        // return jsons.getJSONObject(0).getJSONArray("content").getJSONObject(0).getString("text");
        // Выдержка из доков гптшки:
        /*
        The output array often has more than one
        item in it! It can contain tool calls,
        data about reasoning tokens generated by
        reasoning models, and other items. It is
        not safe to assume that the model's text
        output is present at output[0].content[0].text.
         */
        for (int i = 0; i < jsons.length(); i++) {
            JSONObject json = jsons.getJSONObject(i);
            if (json.has("content")) {
                JSONArray content = json.getJSONArray("content");
                for (int j = 0; j < content.length(); j++) {
                    JSONObject contentJson = content.getJSONObject(j);
                    if (contentJson.has("text")) {
                        return contentJson.getString("text");
                    }
                }
            }
        }
        return MessageText.OPEN_AI_ERROR.getMessageText();
    }

    private String getPromptForAudio (String audio) {
        String prePrompt = StringConstants.PRE_PROMPT.getValue();
        String tables = "Еда: \n" +
                foodRepository.findAll().stream().map(Food::getName).toList() +
                "\nТренировки: \n" +
                activityRepository.findAll().stream().map(Activity::getName).toList();
        return prePrompt + tables + "\n\nТранскрипция:\n" + audio;
    }
}
